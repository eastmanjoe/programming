'################################################
' code to be inserted into a operation program to create a debug
'   table to assist with Modbus troubleshooting

'## Configuration ###############################
PipeLineMode

'################################################
'dataloggerDebug
'0 = Off, 1 = ERROR, 2 = WARNING, 3 = STATUS
Public dbg_level As Long = 0

'################################################


'################# Declarations #################
Const FREQ_REJECTION = _60HZ
Const TOTAL_SLOW_SCANS = 2
Const SLOW_SCAN_INTERVAL_01 = 6
Const SLOW_SCAN_INTERVAL_02 = 6
Const SLOW_SCAN_INTERVAL_03 = 30
Const SLOW_SCAN_INTERVAL_04 = 30
Const CR = CHR(13)
Const LF = CHR(10)
Const CRLF = CHR(13) & CHR(10)
Dim counter As Long

'################################################
'dataloggerDebug
Dim dbg_message As String * 100

'################################################


'################# Data Tables ##################
'dataloggerDebug
DataTable(dataloggerDebug, TRUE, 2000)
  Sample(1, dbg_message, String)
EndTable

'################################################


'################## Functions ###################
'dataloggerDebug
Sub WriteDebugTable(level As Long, string_to_write As String * 105)

    Select Case level
    Case 1
      'Error Level
      dbg_message = "ERR: " & string_to_write
    Case 2
      'Warning Level
      dbg_message = "WARN: " & string_to_write
    Case 3
      'Status Level
      dbg_message = "STAT: " & string_to_write
    Else
      dbg_message = ""
    EndSelect

    If level <= dbg_level Then CallTable(dataloggerDebug)
EndSub


' ///////////////////////////////////////////////////
' insert into end of functions that make queries to Modbus devices
'Write to debug table
  For counter = 1 to ArrayLength(result_every)
    If dbg_level > 0 Then
      Select Case result_every(counter)
      Case Is > 0
        Call WriteDebugTable(1 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u - Response Timeout")
      Case Is < 0
        Call WriteDebugTable(1 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u - Error Code:") & FormatLong(result_every(counter)," %d")
      Case Is = 0
        Call WriteDebugTable(3 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u Successful")
      EndSelect
    EndIf
  Next

  For counter = 1 to ArrayLength(result_daily)
    If dbg_level > 0 Then
      Select Case result_daily(counter)
      Case Is > 0
        Call WriteDebugTable(1 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u - Response Timeout")
      Case Is < 0
        Call WriteDebugTable(1 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u - Error Code:") & FormatLong(result_daily(counter)," %d")
      Case Is = 0
        Call WriteDebugTable(3 , FormatLong(num, "Inverter: %u - ") & FormatLong(counter, "Query: #%u Successful")
      EndSelect
    EndIf
  Next
' ///////////////////////////////////////////////////
'################################################


'################# Main Program #################
BeginProg
  Scan(6, SEC, 3, 0)

    ' call debug table only if user has indicated
    If dbg_level > 0 Then
      Call WriteDebugTable(1, FormatLong(dataloggerDebug.Record(1) + 1, "Hello Main Scan - Record Number: %u"))
      If core_bat_voltage <> fifteenMin.core_bat_voltage_Min(1, 1) Then
        Call WriteDebugTable(3, FormatFloat(core_bat_voltage, "Battery Voltage Changed to: %.3f"))
      EndIf
    EndIf

  NextScan

  SlowSequence
  Scan(SLOW_SCAN_INTERVAL_01, Sec, 1, 0)

    ' call debug table only if user has indicated
    If dbg_level > 0 Then
      Call WriteDebugTable(1 ,"Hello Slow Scan 1 - Record Number: " & FormatLong(dataloggerDebug.Record(1) + 1, "%u"))
    EndIf

  NextScan
  EndSequence

  SlowSequence
  Scan(SLOW_SCAN_INTERVAL_02, Sec, 1, 0)

    ' call debug table only if user has indicated
    If dbg_level > 0 Then
      Call WriteDebugTable(1 ,"Hello Slow Scan 2 - Record Number: " & FormatLong(dataloggerDebug.Record(1) + 1, "%u"))
    EndIf

  NextScan
  EndSequence
EndProg
